
<h1>Новое расписание</h1>
<div class="row">
  <div class="col-md-8">
    <%= form_with(model: @schedule, local: true, class: 'needs-validation', novalidate: true) do |form| %>

      <div class="mb-3">
        <%= form.label :course_id, 'Выберите курс', class: 'form-label' %>
        <%= form.collection_select :course_id, @courses, :id, :name, { prompt: 'Выберите курс' }, { class: 'form-select', required: true } %>
      </div>

      <div id="disciplines" class="mb-3" style="display: none;">
        <%= form.label :discipline_id, 'Выберите дисциплину', class: 'form-label' %>
        <%= form.collection_select :discipline_id, [], :id, :name, { prompt: 'Выберите дисциплину' }, { class: 'form-select', required: true } %>
      </div>

      <div id="schedule-fields" class="mb-3" style="display: none;">
        <div class="row g-3 time-fields">
          <div class="col-md-6">
            <label>Время начала</label>
            <input type="datetime-local" name="schedule[start_times][0]" value="" id="schedule_start_time">
          </div>
          <div class="col-md-6">
            <label>Время окончания</label>
            <input type="datetime-local" name="schedule[end_times][0]" value="" id="schedule_end_time">
          </div>
        </div>
      </div>

      <div id="add-time-link" class="mb-3" style="display: none;">
        <%= link_to 'Добавить еще время', 'javascript:void(0);', class: 'btn btn-outline-secondary', id: 'add-time' %>
      </div>

      <div>
        <%= form.submit 'Создать расписание', class: 'btn btn-primary' %>
      </div>

    <% end %>
  </div>
</div>
<script>
  document.addEventListener('turbo:load', function() {
    var courseSelect = document.querySelector('#schedule_course_id');
    var disciplinesDiv = document.getElementById('disciplines');
    var addTimeLink = document.getElementById('add-time');
    var scheduleFieldsDiv = document.getElementById('schedule-fields');
    var addTimeButton = document.getElementById('add-time-link')
    var startTimeInput = document.querySelector('#schedule_start_time');
    var endTimeInput = document.querySelector('#schedule_end_time');

    courseSelect.addEventListener('change', function() {
      var courseId = courseSelect.value;
      if (courseId) {
        // Загрузить дисциплины для выбранного курса
        fetch(`/schedules/load_disciplines?course_id=${courseId}`)
          .then(response => response.json())
          .then(data => {
            var disciplineSelect = document.querySelector('#schedule_discipline_id');
            disciplineSelect.innerHTML = '<option value="">Выберите дисциплину</option>';
            data.forEach(discipline => {
              var option = document.createElement('option');
              option.value = discipline.id;
              option.text = discipline.name;
              disciplineSelect.add(option);
            });
          });

        // Показать блок с дисциплинами
        disciplinesDiv.style.display = 'block';
      } else {
        // Скрыть блок с дисциплинами
        disciplinesDiv.style.display = 'none';
      }
    });
    startTimeInput.addEventListener('change', function() {
        var startTime = new Date(startTimeInput.value);
        var endTime = new Date(startTime.getTime() + 5400000);
        var timezoneOffset = startTime.getTimezoneOffset() * 60000; // получаем разницу в минутах и переводим в миллисекунды
        endTimeInput.value = new Date(endTime - timezoneOffset).toISOString().slice(0, -5);
    });  

    var disciplineSelect = document.querySelector('#schedule_discipline_id');
    disciplineSelect.addEventListener('change', function() {
      var disciplineId = disciplineSelect.value;
      if (disciplineId) {
        // Показать блок с полями расписания
        addTimeButton.style.display = 'block';
        scheduleFieldsDiv.style.display = 'block';
      } else {
        // Скрыть блок с полями расписания
        addTimeButton.style.display = 'none';
        scheduleFieldsDiv.style.display = 'none';
      }
    });
    var timeFieldsCounter = 1;

  addTimeLink.addEventListener('click', function() {

  // Create a new div for time fields
  var timeFieldsDiv = document.createElement('div');
  timeFieldsDiv.className = 'time-fields';

  // Create labels and input fields for start_time
  var startTimeLabel = document.createElement('label');
  startTimeLabel.textContent = 'Время начала';

  var startTimeInput = document.createElement('input');
  startTimeInput.type = 'datetime-local';
  startTimeInput.name = `schedule[start_times][${timeFieldsCounter}]`;
  startTimeInput.value = startTimeInput.value || ''; // Set initial value

  // Create labels and input fields for end_time
  var endTimeLabel = document.createElement('label');
  endTimeLabel.textContent = 'Время окончания';

  var endTimeInput = document.createElement('input');
  endTimeInput.type = 'datetime-local';
  endTimeInput.name = `schedule[end_times][${timeFieldsCounter}]`;
  endTimeInput.value = endTimeInput.value || ''; // Set initial value

  // Append labels and input fields to the timeFieldsDiv
  timeFieldsDiv.appendChild(startTimeLabel);
  timeFieldsDiv.appendChild(startTimeInput);
  timeFieldsDiv.appendChild(endTimeLabel);
  timeFieldsDiv.appendChild(endTimeInput);

  // Append the timeFieldsDiv to the scheduleFieldsDiv
  scheduleFieldsDiv.appendChild(timeFieldsDiv);
  var startTimeInput = document.querySelector(`input[name="schedule[start_times][${timeFieldsCounter}]"]`);
  var endTimeInput = document.querySelector(`input[name="schedule[end_times][${timeFieldsCounter}]"]`);

  startTimeInput.addEventListener('change', function() {
    var startTime = new Date(startTimeInput.value);
    var endTime = new Date(startTime.getTime() + 5400000);
    var timezoneOffset = startTime.getTimezoneOffset() * 60000;
    endTimeInput.value = new Date(endTime - timezoneOffset).toISOString().slice(0, -5);
  });

  // Update the counter for unique field names
  timeFieldsCounter++;
});
  
});
</script>